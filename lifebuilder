#!/bin/bash
# make sure script is running with root privileges
if [ "$(whoami)" != "root" ]; then
    echo "Need to be root or run with sudo. Exiting."
    exit 1
fi






#  load basic configuration 

lifebuilderVERSION="0.9"
USER=$(logname)  
HOME="/home/${USER}/"
SCRIPTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"  
EXCLUDESFILE="${SCRIPTDIR}/excludes"




#################
# OUTPUT # the output is formatted in a special way in order to be parsed by the python script - do not change !! ยง is the split character
##########################
output() {
    echo "OUTPUT: $1 ยง $2"
}

#################
#  load the system config file (written buy main.py)
##########################
source ${SCRIPTDIR}/conf/config.py



if [[( $BASEWORKDIR = "" ) || ( $LIVEUSER = "" ) || ( $LIVEHOSTNAME = "" ) || ( $CUSTOMISO = "" ) || ( $SKELUSER = "" ) || ( $LIVECDLABEL = "" )]]; then

    output "At least one important setting is missin!" "0"
    exit 0
fi


#################
# prepare workdirectory and logfile
##########################
WORKDIR="$BASEWORKDIR/lifebuilder"
if [ ! -d $WORKDIR ]; then
    mkdir -p $WORKDIR
fi




#################
# prepare excludes for rsync  (rsync doesn't like strings in variables as parameters therefore we work with a file
##########################
rm $EXCLUDESFILE
touch $EXCLUDESFILE
if [ "$EXCLUDES" != "" ]; then
    for addvar in $EXCLUDES ; do
        echo $addvar >> $EXCLUDESFILE
    done
fi




#-----------------------------#
output "PART,Part 1" "0"
#-----------------------------#



# 
# #########emergency stop here#############
# output "$WORKDIR/$CUSTOMISO which is in size is ready to be burned or tested in a virtual machine." "10"
# output "ISOLOCATION,$WORKDIR/$CUSTOMISO" "100"
# exit 0
# #########################################






cleanhome (){
        # delete all files that would compromise privacy or produce conflicts 
        # .xsession files, ssh keys, kwallet, trash, cache, recent documents, history browser, shell, cookies, configs with passwords
        DUMMYSYSHOME=$1
        
        if [[( $DUMMYSYSHOME = ""  )]]
        then
            DUMMYSYSHOME="/etc/skel"
        fi
        
        output "Cleaning up home : ${DUMMYSYSHOME}"
        
        #google chrome history
        rm -rf "${DUMMYSYSHOME}/.config/google-chrome/History" > /dev/null 2>&1
        rm -rf "${DUMMYSYSHOME}/.config/google-chrome/History Provider Cache"  > /dev/null 2>&1
        rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Login Data"  > /dev/null 2>&1
        rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Current Session"  > /dev/null 2>&1
        rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Current Tabs"  > /dev/null 2>&1
        rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Cookies"  > /dev/null 2>&1
        rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Top Sites"  > /dev/null 2>&1
        rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Visited Links"  > /dev/null 2>&1
        rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Web Data" > /dev/null 2>&1
        #firefox ?
     
        rm -rf ${DUMMYSYSHOME}/.gconf/system/networking > /dev/null 2>&1
        rm -rf ${DUMMYSYSHOME}/.local/gvfs-metadata > /dev/null 2>&1
        rm -rf ${DUMMYSYSHOME}/.local/share/gvfs-metadata > /dev/null 2>&1
        rm -rf ${DUMMYSYSHOME}/.local/share/applications/wine-* > /dev/null 2>&1
        rm -rf ${DUMMYSYSHOME}/.local/share/Trash > /dev/null 2>&1
        rm -rf ${DUMMYSYSHOME}/.local/share/akonadi > /dev/null 2>&1
        rm -rf ${DUMMYSYSHOME}/.local/share/webkit > /dev/null 2>&1
        rm -rf ${DUMMYSYSHOME}/.local/share/kwalletd > /dev/null 2>&1
        rm -rf ${DUMMYSYSHOME}/.kde/share/apps/klipper > /dev/null 2>&1
        rm -rf ${DUMMYSYSHOME}/.kde/share/apps/nepomuk > /dev/null 2>&1
        
        rm -rf ${DUMMYSYSHOME}/.kde/share/apps/RecentDocuments/* > /dev/null 2>&1
        rm -rf ${DUMMYSYSHOME}/.local/share/RecentDocuments/* > /dev/null 2>&1
    
        
        rm -rf ${DUMMYSYSHOME}/.life/EXAM/client.log > /dev/null 2>&1
        rm -rf ${DUMMYSYSHOME}/.bash_history > /dev/null 2>&1
        rm -rf ${DUMMYSYSHOME}/.gitconfig > /dev/null 2>&1
        rm -rf ${DUMMYSYSHOME}/.gksu.lock > /dev/null 2>&1
        rm -rf ${DUMMYSYSHOME}/.history > /dev/null 2>&1
        rm -rf ${DUMMYSYSHOME}/.Xauthority > /dev/null 2>&1
        rm -rf ${DUMMYSYSHOME}/.xsession-errors > /dev/null 2>&1
        rm -rf ${DUMMYSYSHOME}/.recently-used > /dev/null 2>&1
        rm -rf ${DUMMYSYSHOME}/.dbus > /dev/null 2>&1
        rm -rf ${DUMMYSYSHOME}/.cache > /dev/null 2>&1
        rm -rf ${DUMMYSYSHOME}/.ssh > /dev/null 2>&1
         
        for i in ${DUMMYSYSHOME}/.gnome2/keyrings/*; do rm $i > /dev/null 2>&1; done
        find ${DUMMYSYSHOME}/ -name "*socket*" | xargs rm -rf '{}' > /dev/null 2>&1
        find ${DUMMYSYSHOME}/ -name "*cache*" | xargs rm -rf '{}' > /dev/null 2>&1
}







copyhome (){
    # this copies the whole HOME folder of the current user to the lifesystem home in order to be used if the username is the same
    # ATTENTION we could just copy the userhome directory to skel and it would be used as default for the live session user
    # but this will slow down the boot process on "persistent" live systems enormously because skel is copied to casper-rw on boot time 
    HOMEOLDER=`grep "^$SKELUSER:" /etc/passwd | awk -F ":" '{print $6}'`
    DUMMYSYSHOME="$WORKDIR/dummysys/home"
    DUMMYSYSHOMEUSERDIR="$WORKDIR/dummysys/home/$SKELUSER"
    rm -rf ${DUMMYSYSHOME}/*
    
    output "Copying $HOMEOLDER" "52"
    
    if [ -d "$HOMEOLDER" ]; then
        cd $HOMEOLDER
        history -w
        history -c
        
        rsync --exclude-from="${EXCLUDESFILE}" --exclude='*.log.*' --exclude='*~' --exclude='*.pid' --exclude='*.bak' --exclude='*.[0-9].gz' --exclude='*.deb' --exclude='kdecache*' -a ${HOMEOLDER} ${DUMMYSYSHOME}/.
        
        cleanhome $DUMMYSYSHOMEUSERDIR
        
        # change ownership 
        chown -R $SKELUSER:$SKELUSER ${DUMMYSYSHOME}   > /dev/null 2>&1  
    else
        # output 100    
        output "ERROR $SKELUSER or home folder not found - exiting."
        exit 1
     
    fi

}



copyskel (){
    # the content of /etc/skel is used as default userconfiguration for every new user and the live user if the home directory does not exist already
    # only selected files and folders are copied there.. and then cleaned up
    
    SKELFOLDER=`grep "^$SKELUSER:" /etc/passwd | awk -F ":" '{print $6}'`

    if [ -d "$SKELFOLDER" ]; then
        cd $SKELFOLDER
        
        history -w
        history -c
        
        # output 1
        output "Cleaning /etc/skel ..." "1"
        
        rm -rf /etc/skel/Webroot > /dev/null 2>&1
        rm -rf /etc/skel/.life > /dev/null 2>&1
        rm -rf /etc/skel/.arduino > /dev/null 2>&1
        rm -rf /etc/skel/.apps > /dev/null 2>&1
        rm -rf /etc/skel/.designer > /dev/null 2>&1
        rm -rf /etc/skel/.filius > /dev/null 2>&1
        rm -rf /etc/skel/.fonts > /dev/null 2>&1
        rm -rf /etc/skel/.gconf > /dev/null 2>&1
        rm -rf /etc/skel/.bashrc > /dev/null 2>&1
        rm -rf /etc/skel/.profile > /dev/null 2>&1
        rm -rf /etc/skel/.gconf > /dev/null 2>&1
        rm -rf /etc/skel/.gnome > /dev/null 2>&1
        rm -rf /etc/skel/.config > /dev/null 2>&1
        rm -rf /etc/skel/.local > /dev/null 2>&1
        rm -rf /etc/skel/.gtkrc* > /dev/null 2>&1
        rm -rf /etc/skel/.kde* > /dev/null 2>&1
        
        # output2
        output "Copying config files to /etc/skel" "5"
    
        rsync -a Webroot /etc/skel/ > /dev/null 2>&1
        rsync -a Downloads /etc/skel/ > /dev/null 2>&1
        rsync -a .life /etc/skel/     > /dev/null 2>&1       # very important :)
        rsync -a .arduino /etc/skel/ > /dev/null 2>&1
        rsync -a .apps /etc/skel/ > /dev/null 2>&1
        rsync -a .designer /etc/skel/ > /dev/null 2>&1
        rsync -a .filius /etc/skel/ > /dev/null 2>&1
        rsync -a .fonts /etc/skel/ > /dev/null 2>&1
        rsync -a .gconf /etc/skel/ > /dev/null 2>&1
        rsync -a .bashrc /etc/skel/ > /dev/null 2>&1
        rsync -a .profile /etc/skel/ > /dev/null 2>&1
        rsync -a .gnome /etc/skel/ > /dev/null 2>&1
        rsync -a .config /etc/skel/ > /dev/null 2>&1
        rsync -a .local /etc/skel/ > /dev/null 2>&1
        rsync -a .gtkrc* /etc/skel/ > /dev/null 2>&1
        rsync -a .kde* /etc/skel/ > /dev/null 2>&1
    
        # output3
        output "clean up the mess a little bit more.." "9"
        
        cleanhome
        
        mkdir /etc/skel/Downloads/   > /dev/null 2>&1  #we want this default folder
        cp .life/applications/life-firststart/firststart.sh /etc/skel/.config/autostart-scripts/
    
        #fix permissions 
        chown -R root:root /etc/skel
        # output4
        output "skel Copy - done" "13"
    else
        # output 100    
        output "ERROR $SKELUSER or home folder not found - exiting."
        exit 1
    fi
}




cleansystem (){
    # remove unwanted packages and usage history 

    # clear kde plasma clipboard and recend applications
    sudo -u $SKELUSER  -H qdbus org.kde.klipper /klipper org.kde.klipper.klipper.clearClipboardHistory
    sudo -u $SKELUSER  -H dbus-send --session --dest=org.kde.ActivityManager --type=method_call /ActivityManager/Resources/Scoring org.kde.ActivityManager.ResourcesScoring.DeleteStatsForResource string:":current" string:":any" string:"applications:*"

    
    # output5
    output "Cleaning System before building" "17"
    apt-get update  &> /dev/null
    apt-get -y -q autoremove
    apt-get clean   
    
     # output7  
    output  "removing cache files" "20"
    sudo rm /var/crash/* > /dev/null 2>&1
    sudo rm -rf /etc/skel/*   > /dev/null 2>&1
    
    # remove all old kernel headers and tools
    # output9
    output "purging old kernel, tools and headers"  "22"
    dpkg -l 'linux-*' | sed '/^ii/!d;/'"$(uname -r | sed "s/\(.*\)-\([^0-9]\+\)/\1/")"'/d;s/^[^ ]* [^ ]* \([^ ]*\).*/\1/;/[0-9]/!d' | sed '/dev/d' | xargs apt-get -y purge


    #removing popularity-contest as it causes a problem when installing with ubiquity
    # output10
    output "Making sure popularity contest is not installed"  "25"
    apt-get -y -q remove popularity-contest &> /dev/null

    #removing syslinux-themes as it causes problems
    # output11
    output "Making sure syslinux-themes is not installed"  "28"
    apt-get -y -q purge syslinux-themes* &> /dev/null

    
    
    #remove some proprietary assets (important if you want to distribute this iso in public) 
    if [[( $REMOVERESTRICTED = "True"  )]]  
    then
        output "Removing proprietary packages from the system"  "30"
    
        sudo apt-get -y -q purge ttf-mscorefonts-installer
        sudo apt-get -y -q purge kubuntu-restricted-extras lubuntu-restricted-extras ubuntu-restricted-extras xubuntu-restricted-extras
        sudo apt-get -y -q purge kubuntu-restricted-addons lubuntu-restricted-addons ubuntu-restricted-addons xubuntu-restricted-addons
        sudo apt-get -y -q purge acroread adobereader-enu acroread-bin:i386
        sudo apt-get -y -q purge flashplugin-installer adobe-flashplugin flashplugin-downloader
        sudo apt-get -y -q autoremove
        sudo apt-get -y -q autoclean
        
        output "Removing all fonts from the userdirectory"  "34"
        SKELFOLDER=`grep "^$SKELUSER:" /etc/passwd | awk -F ":" '{print $6}'`
        if [ -d "$SKELFOLDER" ]; then
            #don't delete the whole font folder otherwise rescan will just skip and not remove fonts
            rm -rf $SKELFOLDER/.fonts/*     
            fc-cache -rv
        fi
    fi
    
    
}



cdfs (){
    #################
    #  clean up
    ##########################
    cleansystem
    
    
    ##############
    # check if we should copy the default configuration into the squashfs SKEL folder for all new users
    # this only makes sense if the default user config is also used for the live user (COPYDEFAULTUSER)
    # ATTENTION we could just copy the userhome directory to skel and it would be used as default for the live session user
    # but this will slow down the boot process on "persistent" live systems enormously because skel is copied to casper-rw on boot time 
    ###############################
    if [[( $COPYDEFAULTUSER = "True"  )]]
    then
        if [[( $COPYSKEL = "True"  )]]   
        then
            copyskel
        fi
    fi
        
        
    
    
    #################
    #  Create the FILESYSTEM tree in $WORKDIR/ISOTMP
    ##########################
     
    #Installing isolinux and ubiquity (installer)
    # output12
    output "Making sure isolinux and other packages are installed"  "38"
    apt-get -y -q install isolinux syslinux-utils syslinux syslinux-common &> /dev/null
    apt-get -y -q install ubiquity-frontend-kde ubiquity-slideshow-neon   &> /dev/null
    apt-get -y -q install qemu-kvm

    
    sleep 1
    
    # prevent the installer from changing the apt sources.list
    sed -i '/rm/d' /usr/share/ubiquity/apt-setup
    sed -i '/boot/d' /usr/share/ubiquity/apt-setup
    sed -i '/cdrom:/d' /usr/share/ubiquity/apt-setup
    echo "mkdir -p /target/boot/efi" >> /usr/share/ubiquity/apt-setup
    echo "rm -f /target/boot/efi/startup.nsh" >> /usr/share/ubiquity/apt-setup
    echo "touch /target/boot/efi/startup.nsh" >> /usr/share/ubiquity/apt-setup
    echo 'echo "fs0:\EFI\ubuntu\grubx64.efi" >> /target/boot/efi/startup.nsh' >> /usr/share/ubiquity/apt-setup
    
    

    rm -rf $WORKDIR/dummysys/
    rm -rf $WORKDIR/ISOTMP/
  
  # output13
    output "Creating $WORKDIR folder tree"  "40"
   
    mkdir -p $WORKDIR/ISOTMP/{casper,preseed,isolinux,install,.disk} 
    mkdir -p $WORKDIR/dummysys/{dev,etc,cdrom,proc,tmp,sys,mnt,media/cdrom,var,run,home}
    
    rsync -a /dev/urandom $WORKDIR/dummysys/dev/    # why? what do we need urandom for - isn't it created on boot time ?
    chmod ug+rwx,o+rwt $WORKDIR/dummysys/tmp        # needs to be accessable by everybody
    
    
    
    
    # output14
    output "Copying /var and /etc to temp folder. This will take a while."  "45"
    rsync --exclude-from="${EXCLUDESFILE}" --exclude='*.log.*' --exclude='*~' --exclude='*.pid' --exclude='*.bak' --exclude='*.[0-9].gz' --exclude='*.deb' --exclude='kdecache*' -a /var/. $WORKDIR/dummysys/var/.
    #rsync --exclude-from="${EXCLUDESFILE}" -a /etc/. $WORKDIR/dummysys/etc/.  #using excludes here is dangerous. most files here are needed
    rsync -a /etc/. $WORKDIR/dummysys/etc/.

    
    
    
    
    #Adding packages location to sources
    ARCH=`archdetect | awk -F "/" '{print $1}'`
    DISKINFONAME=`echo $LIVECDLABEL | awk '{print $1}'`
    # output15
    output "Adding CD-ROM to source list"  "60"
    . /etc/lsb-release
    sed -i '/cdrom:/d' $WORKDIR/dummysys/etc/apt/sources.list &> /dev/null
    echo "deb cdrom:[$DISKINFONAME $DISTRIB_RELEASE - Release $ARCH]/ dists/" >> $WORKDIR/dummysys/etc/apt/sources.list

    
    #Copying grub config
    cp ${SCRIPTDIR}/conf/grub.conf $WORKDIR/dummysys/etc/default/grub
    sed -i "s/LIVECDLABEL/$LIVECDLABEL/g" $WORKDIR/dummysys/etc/default/grub

    
    
    
    
    # output16
    output "Removing unnecessary files in $WORKDIR/dummysys"  "66"
    
    rm -rf $WORKDIR/dummysys/var/lib/apt/lists/* -vf &> /dev/null
    rm -rf $WORKDIR/dummysys/var/lib/apt/lists/lock &> /dev/null
    rm -rf $WORKDIR/dummysys/var/cache/apt/archives/* &> /dev/null
    rm -rf $WORKDIR/dummysys/var/lib/ureadahead/pack &> /dev/null
    rm -rf $WORKDIR/dummysys/var/cache/gdm/* &> /dev/null
    rm -f $WORKDIR/dummysys/etc/cups/ssl/server.crt &> /dev/null
    rm -f $WORKDIR/dummysys/etc/cups/ssl/server.key &> /dev/null
    rm -f $WORKDIR/dummysys/etc/ssh/*key* &> /dev/null
    rm -f $WORKDIR/dummysys/var/lib/dbus/machine-id &> /dev/null
    rm -rf $WORKDIR/dummysys/var/tmp/* &> /dev/null
    rm -rf $WORKDIR/dummysys/var/backups/* &> /dev/null
    rm -rf $WORKDIR/dummysys/var/lock/* &> /dev/null
    rm -rf $WORKDIR/dummysys/var/crash/* &> /dev/null
    rm -rf $WORKDIR/dummysys/var/lib/ubiquity/* &> /dev/null
    

    
    #create empty logfiles
    find $WORKDIR/dummysys/var/log -regex '.*?[0-9].*?' -exec rm -v {} \;
    find $WORKDIR/dummysys/var/log -type f | while read file
    do
            cat /dev/null | tee $file
    done
    
    
    
    #Setting  auto login for sddm (makes user $LIVEUSER autologin )  
    cp -a ${SCRIPTDIR}/conf/sddm.conf $WORKDIR/dummysys/etc/
    sed -i "s/LIVEUSER/$LIVEUSER/g" $WORKDIR/dummysys/etc/sddm.conf
    chmod +x $WORKDIR/dummysys/etc/sddm.conf
    chmod 755 $WORKDIR/dummysys/etc/sddm.conf
    

    
    
  
    
    
    
    

    #################
    #  Copy the whole home folder to dummysys in order to preserve all configurations (if checkbox in UI is checked)
    ##########################
    
    if [[( $COPYDEFAULTUSER = "True"  )]]
    then
            #################
            #  copy default user and make sure the live system does not create a new user - nor ubiquity installer
            ##########################
            copyhome
            
            # remove exec rights from add user scripts so no new live system user is added
            output "Making sure adduser and autologin functions of casper are deactivated"  "74"
            chmod 644 /usr/share/initramfs-tools/scripts/casper-bottom/*adduser /usr/share/initramfs-tools/scripts/casper-bottom/*autologin
            
            #################
            #  ubiquity installer options... we don't create a new user.. the original system user is just copied back
            ##########################
            
            # since this is sort of backup mode, prevent user-setup-apply from running during install - this will install no user at all (installed system should have the same user as life system 
            if [ ! -f /usr/lib/ubiquity/user-setup/user-setup-apply.orig ]; then
                mv /usr/lib/ubiquity/user-setup/user-setup-apply /usr/lib/ubiquity/user-setup/user-setup-apply.orig
            fi
            echo "exit 0"> /usr/lib/ubiquity/user-setup/user-setup-apply
            chmod 755 /usr/lib/ubiquity/user-setup/user-setup-apply
            
            
    else
       
            #################
            #  remove current users and groups for the live system
            ##########################
            #only get rid of all user entries in /etc/passwd /etc/group if no usersettings are copied - the live user gets the uuid 999 - the first user on an installed system is 1000
            
            rm -rf $WORKDIR/dummysys/var/lib/sudo/*
            rm -rf $WORKDIR/dummysys/var/lib/AccountsService/users/*
            rm -rf $WORKDIR/dummysys/var/lib/kdm/*
            rm -rf $WORKDIR/dummysys/var/run/console/*
            rm -f $WORKDIR/dummysys/etc/X11/xorg.conf* &> /dev/null
            rm -f $WORKDIR/dummysys/etc/{hosts,hostname,mtab*,fstab}
            rm -f $WORKDIR/dummysys/etc/{group,passwd,shadow,shadow-,gshadow,gshadow-}
            rm -f $WORKDIR/dummysys/etc/gdm/gdm.conf-custom
            rm -f $WORKDIR/dummysys/etc/cups/printers.conf  #comment out if you want to provide a default network printer
            rm -rf $WORKDIR/dummysys/etc/NetworkManager/system-connections/*  # i want to deliver a manual connection example
            touch $WORKDIR/dummysys/etc/cups/printers.conf  #provide empty files
            if [ ! -d /run ]; then
                find $WORKDIR/dummysys/var/run/ $WORKDIR/dummysys/var/mail/ $WORKDIR/dummysys/var/spool/ -type f -exec rm -f {} \;
            else
                find $WORKDIR/dummysys/var/mail/ $WORKDIR/dummysys/var/spool/ -type f -exec rm -f {} \;
                unlink $WORKDIR/dummysys/var/run
                cd $WORKDIR/dummysys/var
                ln -sf ../run run
            fi
        
            # output17
            output "Cleaning up passwd, group, files for the live system" "70"
            # if the mode is dist then renumber the uid's for any user with a uid greater than 1000
            # and make the passwdrestore file so the uid's are restored before the script finishes
            # if this is not done, the livecd user will not be created properly
            #re-build passwd file without those users above UID 999 and below 9999
            grep '^[^:]*:[^:]*:[0-9]:' /etc/passwd > $WORKDIR/dummysys/etc/passwd
            grep '^[^:]*:[^:]*:[0-9][0-9]:' /etc/passwd >> $WORKDIR/dummysys/etc/passwd
            grep '^[^:]*:[^:]*:[0-9][0-9][0-9]:' /etc/passwd >> $WORKDIR/dummysys/etc/passwd
            grep '^[^:]*:[^:]*:[3-9][0-9][0-9][0-9][0-9]:' /etc/passwd >> $WORKDIR/dummysys/etc/passwd

            #re-build group file without those groups that belong to the users
            grep '^[^:]*:[^:]*:[0-9]:' /etc/group > $WORKDIR/dummysys/etc/group
            grep '^[^:]*:[^:]*:[0-9][0-9]:' /etc/group >> $WORKDIR/dummysys/etc/group
            grep '^[^:]*:[^:]*:[0-9][0-9][0-9]:' /etc/group >> $WORKDIR/dummysys/etc/group
            grep '^[^:]*:[^:]*:[3-9][0-9][0-9][0-9][0-9]:' /etc/group >> $WORKDIR/dummysys/etc/group

            # get the usernames of the current users on the system and write them into tmpusers
            grep '^[^:]*:[^:]*:[5-9][0-9][0-9]:' /etc/passwd | awk -F ":" '{print $1}'> $WORKDIR/tmpusers1
            grep '^[^:]*:[^:]*:[1-9][0-9][0-9][0-9]:' /etc/passwd | awk -F ":" '{print $1}'> $WORKDIR/tmpusers2
            grep '^[^:]*:[^:]*:[1-2][0-9][0-9][0-9][0-9]:' /etc/passwd | awk -F ":" '{print $1}'> $WORKDIR/tmpusers3
            cat $WORKDIR/tmpusers1 $WORKDIR/tmpusers2 $WORKDIR/tmpusers3 > $WORKDIR/tmpusers
            rm -f $WORKDIR/tmpusers[0-9] &> /dev/null

            #get rid of all tmpusers entries in the group file
            cat $WORKDIR/tmpusers | while read LINE ;do
                echo $LINE | xargs -i sed -e 's/,{}$//g' $WORKDIR/dummysys/etc/group > $WORKDIR/dummysys/etc/group.new1
                echo $LINE | xargs -i sed -e 's/,{},/,/g' $WORKDIR/dummysys/etc/group.new1 > $WORKDIR/dummysys/etc/group.new2
                echo $LINE | xargs -i sed -e 's/:{}$/:/g' $WORKDIR/dummysys/etc/group.new2 > $WORKDIR/dummysys/etc/group.new3
                echo $LINE | xargs -i sed -e 's/:{},/:/g' $WORKDIR/dummysys/etc/group.new3 > $WORKDIR/dummysys/etc/group
                rm -f $WORKDIR/dummysys/etc/group.new* &> /dev/null
            done
            
            # output18
            output "Making sure adduser and autologin functions of casper are activated"  "74"
            chmod 755 /usr/share/initramfs-tools/scripts/casper-bottom/*adduser /usr/share/initramfs-tools/scripts/casper-bottom/*autologin 

            # make sure user-setup-apply is present in case backup mode (also inclued user home config ) was last used
            if [ -f /usr/lib/ubiquity/user-setup/user-setup-apply.orig ]; then
                cp /usr/lib/ubiquity/user-setup/user-setup-apply.orig /usr/lib/ubiquity/user-setup/user-setup-apply
            fi
                

    fi
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    #################
    #  add other stuff like preseed, memtest, efi 
    ##########################
    #copy some of the necessary stuff for the livecd
    cp ${SCRIPTDIR}/preseed/* $WORKDIR/ISOTMP/preseed/
    
    
    #EFI BOOT
    # output20
    output "Copying EFI Boot for the live system" "80"
    cp -a ${SCRIPTDIR}/boot/ $WORKDIR/ISOTMP/
    cp -a ${SCRIPTDIR}/EFI/ $WORKDIR/ISOTMP/
    
    
    
    #################
    #  Downloading packages for offline install (needed by the systeminstaller in order to install the system to a disk)
    ##########################
    
    
    
    # output21
    output "Downloading packages for CD" "82"
    
    # Check Architecture
    ARCH=`archdetect | awk -F "/" '{print $1}'`
    mkdir -p $WORKDIR/ISOTMP/pool
    cd $WORKDIR/ISOTMP/pool
    
    apt-get download b43-fwcutter bcmwl-kernel-source efibootmgr grub-common grub-efi grub-efi-amd64 grub-efi-amd64-bin grub-efi-amd64-signed grub-efi-ia32 grub-efi-ia32-bin grub-pc-bin grub-pc grub2-common grub-gfxpayload-lists libefivar0 mokutil secureboot-db shim shim-signed &> /dev/null

    mkdir -p $WORKDIR/ISOTMP/dists
    cd $WORKDIR/ISOTMP/
    dpkg-scanpackages -m pool /dev/null | gzip -9c > dists/Packages.gz



    #################
    #   create isolinux folder and files
    ##########################
    
  
    # output22
    output "Creating isolinux setup for the live system" "88"
    find /usr -name 'isolinux.bin' -exec cp {} $WORKDIR/ISOTMP/isolinux/ \;
    #find fix for vesamenu.32 provided by Krasimir S. Stefanov <lokiisyourmaster@gmail.com>
    VESAMENU=`find /usr -print0 | grep -FzZ "bios/vesamenu.c32"`
    cp $VESAMENU $WORKDIR/ISOTMP/isolinux/ 
    LDLINUX=`find /usr -print0 | grep -FzZ "bios/ldlinux.c32"`
    cp $LDLINUX $WORKDIR/ISOTMP/isolinux/
    LIBUTIL=`find /usr -print0 | grep -FzZ "bios/libutil.c32"`
    cp $LIBUTIL $WORKDIR/ISOTMP/isolinux/
    LIBCOM=`find /usr -print0 | grep -FzZ "bios/libcom32.c32"`
    cp $LIBCOM $WORKDIR/ISOTMP/isolinux/
    MENU=`find /usr -print0 | grep -FzZ "bios/menu.c32"`
    cp $MENU $WORKDIR/ISOTMP/isolinux/
    
    
    # setup isolinux for the livecd   (iso linux is used for liveCD .. syslinux is used for live USB
    VERSION=`lsb_release -r | awk '{print $2}' | awk -F "." '{print $1}'`
    sed -e 's/__LIVECDLABEL__/'"$LIVECDLABEL"'/g' ${SCRIPTDIR}/isolinux/isolinux.cfg > $WORKDIR/ISOTMP/isolinux/isolinux.cfg
    sed -e 's/__LIVECDLABEL__/'"$LIVECDLABEL"'/g' ${SCRIPTDIR}/isolinux/isolinux.cfg > $WORKDIR/ISOTMP/isolinux/syslinux.cfg    #usb creator would rename the folder to syslinux later
    cp ${SCRIPTDIR}/isolinux/splash.png $WORKDIR/ISOTMP/isolinux/splash.png
    
    
    #################
    #  add more stuff like .diskdefines .manifest etc.
    ##########################
    
    
    
    # output23
    output "Creating README.diskdefines"  "93"
    ARCH=`archdetect | awk -F "/" '{print $1}'`

    cat > $WORKDIR/ISOTMP/README.diskdefines <<FOO
#define DISKNAME  $LIVECDLABEL
#define TYPE  binary
#define TYPEbinary  1
#define ARCH  $ARCH
#define ARCH$ARCH  1
#define DISKNUM  1
#define DISKNUM1  1
#define TOTALNUM  0
#define TOTALNUM0  1
FOO
    cp $WORKDIR/ISOTMP/README.diskdefines $WORKDIR/ISOTMP/casper/README.diskdefines

    sleep 1

    # Make the filesystem.manifest and filesystem.manifest-desktop
    # output24
    output "Creating filesystem.manifest and filesystem.manifest-desktop" "91"
    dpkg-query -W --showformat='${Package} ${Version}\n' > $WORKDIR/ISOTMP/casper/filesystem.manifest

    cp $WORKDIR/ISOTMP/casper/filesystem.manifest $WORKDIR/ISOTMP/casper/filesystem.manifest-desktop
    # Suggested by lkjoel from Ubuntu Forums - Joel Leclerc to remove the frontend so the Install menu item is not on the installed system
    sed -i '/ubiquity-frontend/d' $WORKDIR/ISOTMP/casper/filesystem.manifest-desktop

    sleep 1

    # Prepare casper.conf
    # output25
    output "Creating the casper.conf file." "94"
    
    cat > /etc/casper.conf <<FOO
# This file should go in /etc/casper.conf
# Supported variables are:
# USERNAME, USERFULLNAME, HOST, BUILD_SYSTEM

export USERNAME="$LIVEUSER"
export USERFULLNAME="Live session user"
export HOST="$LIVEHOSTNAME"
export BUILD_SYSTEM="Ubuntu"
export FLAVOUR="$LIVEHOSTNAME"
FOO
    
    cp /etc/casper.conf $WORKDIR/dummysys/etc/

    

    
    
    

    #################
    #  create a new initial ramdisk including the casper scripts and kernel
    ##########################
    
  
    # output26
    output "Creating a new initial ramdisk for the live system" "96"
    mkinitramfs -o /boot/initrd.img-`uname -r` `uname -r`

    # output27
    output "Copying your kernel and initrd for the livecd" "100"
    cp /boot/vmlinuz-`uname -r` $WORKDIR/ISOTMP/casper/vmlinuz
    cp /boot/initrd.img-`uname -r` $WORKDIR/ISOTMP/casper/initrd.gz
    #check if that went well .. otherwise you can stop immediately
    if [ ! -f $WORKDIR/ISOTMP/casper/vmlinuz ]; then
        # output100
        output "ERROR Missing valid kernel. Exiting"
        exit 1
    fi
    if [ ! -f $WORKDIR/ISOTMP/casper/initrd.gz ]; then
        # output100
        output "ERROR Missing valid initial ramdisk. Exiting"
        exit 1
    fi

    
    #-----------------------------#
    output "PART,Part 2" "0"
    #-----------------------------#
    
    
    
    ##############
    #   Make filesystem.squashfs  
    ###############################
    
    if [ -f $WORKDIR/ISOTMP/casper/filesystem.squashfs ]; then
        rm -f $WORKDIR/ISOTMP/casper/filesystem.squashfs &> /dev/null
    fi
    # output1
    output "Creating filesystem.squashfs   ... this will take a while so be patient" "0"
    sleep 1
    
    
    ##############
    #   Create a list of folders to be included in the squashfs (those we didn't copy before because we can add them unaltered)
    ###############################
    
    REALFOLDERS=""
    for d in `ls -d $WORKDIR/dummysys/*`; do
        REALFOLDERS="$REALFOLDERS $d"
    done

    for d in `ls / | grep -v etc | grep -v run | grep -v tmp | grep -v sys | grep -v var | grep -v dev | grep -v media | grep -v cdrom | grep -v mnt | grep -v lost+found | grep -v proc | grep -v home`; do
        REALFOLDERS="$REALFOLDERS /$d"
    done
    
#     in case of  $COPYDEFAULTUSER = "True"  we could just use the original HOME folder instead of copying it via copyhome()  - that way we cant change anything in it anymore - does it make a difference ?
#     for d in `ls / | grep -v etc | grep -v run | grep -v tmp | grep -v sys | grep -v var | grep -v dev | grep -v media | grep -v cdrom | grep -v mnt | grep -v lost+found | grep -v proc`; do
#         REALFOLDERS="$REALFOLDERS /$d"
#     done
    

    ##############
    #   Calculate the number of files to include (for the python script progress bar)
    ###############################
    
    # we count all inodes in the REALFOLDERS in order to predict how many lines mksquashfs will produce (and we add 28 lines because of its additional output
    FILES=28
    for k in $REALFOLDERS; do
        LIST=`ls -d $k`
        NEWFILES=$(for i in $LIST; do find $i -printf "%i\n" | sort -u | wc -l ; done)
        FILES=$(( $FILES + $NEWFILES ))
    done
    
    #we print a triggerword and the number of files to stdout in order for the pythonscript to grab it
    # output2
    output "SQUASHSTART,$FILES" "0"
    # the progress of mksquashfs is monitored by the python script.. every line it produces advances the progressbar
    
    
    ##############
    #  Make the fracking squashfs NOW     # squashfsopts uses -comp xz for highest compression - excluding bootfiles from compression
    ###############################
    
    mksquashfs $REALFOLDERS $WORKDIR/ISOTMP/casper/filesystem.squashfs -no-progress -info $SQUASHFSOPTS -e /boot/efi/EFI /boot/grub $BASEWORKDIR $EXCLUDES
    
    
    # we send the finished process trigger word
    # output3
    output "SQUASHEND" "100"
    
    
    
    sleep 1

    
    #-----------------------------#
    output "PART,Part 3" "0"
    #-----------------------------#
  
    ##############
    # check and calculate filesize
    ###############################
  

    #checking the size of the compressed filesystem to ensure it meets the iso9660 spec for a single file" 
    SQUASHFSSIZE=`ls -s $WORKDIR/ISOTMP/casper/filesystem.squashfs | awk -F " " '{print $1}'`
    if [ "$SQUASHFSSIZE" -gt "3999999" ]; then
        # output100
        output "ERROR The compressed filesystem is larger than genisoimage allows for a single file. You must try to reduce the amount of data you are backing up and try again."
        exit 1
    fi

    #add filesystem size 
    # output1
    output "Calculating the installed filesystem size for the installer" "0"

    unsquashfs -lls $WORKDIR/ISOTMP/casper/filesystem.squashfs | grep -v " inodes " | grep -v "unsquashfs:" | awk '{print $3}' | grep -v "," > /tmp/size.tmp

    for i in `cat /tmp/size.tmp`; do a=$(($a+$i)); done
    echo $a > $WORKDIR/ISOTMP/casper/filesystem.size
    
}
















iso (){

    CREATEISO="`which mkisofs`"
    if [ "$CREATEISO" = "" ]; then
        CREATEISO="`which genisoimage`"
    fi


    ##############
    # Make ISO compatible with Ubuntu Startup Disk Creator
    ###############################

    # output2
    output "Making disk compatible with Ubuntu Startup Disk Creator." "12"
    
    . /etc/lsb-release
    touch $WORKDIR/ISOTMP/ubuntu
    touch $WORKDIR/ISOTMP/.disk/base_installable
    echo "full_cd/single" > $WORKDIR/ISOTMP/.disk/cd_type
    ARCH=`archdetect | awk -F "/" '{print $1}'`

    DISKINFONAME=`echo $LIVECDLABEL | awk '{print $1}'`
    echo $DISKINFONAME $DISTRIB_RELEASE - Release $ARCH > $WORKDIR/ISOTMP/.disk/info
    echo $LIVECDURL > $WORKDIR/ISOTMP/.disk/release_notes_url

    # Make md5sum.txt for the files on the livecd - this is used during the checking function of the livecd
    # output3
    output "Creating md5sum.txt for the livecd/dvd" "25"
    cd $WORKDIR/ISOTMP && find . -type f -print0 | xargs -0 md5sum > md5sum.txt

    #isolinux mode

    # remove files that change and cause problems with checking the disk
    sed -e '/isolinux/d' md5sum.txt > md5sum.txt.new
    sed -e '/md5sum/d' md5sum.txt.new > md5sum.txt
    rm -f md5sum.txt.new &> /dev/null

    sleep 1

  
    ##############
    # Make the ISO file
    ###############################
    
    if [ -f $WORKDIR/$CUSTOMISO ]; then
        #there already is an ISO file with that name.. rename it
        mv -f $WORKDIR/$CUSTOMISO $WORKDIR/$CUSTOMISO-old
        
    fi
    
    
    # output4
    output "Creating $CUSTOMISO in $WORKDIR - this can take a while..." "38"
    $CREATEISO -iso-level 3 -quiet -r -V "$LIVECDLABEL" -cache-inodes -J -l -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -eltorito-alt-boot -e boot/grub/efi.img -no-emul-boot -o $WORKDIR/$CUSTOMISO "$WORKDIR/ISOTMP"
    if [ ! -f $WORKDIR/$CUSTOMISO ]; then
        # output100
        output "ERROR The iso was not created. There was a problem. Exiting"
        exit 1
    fi
    
    # Make the iso hybrid so it can be simply dd copied to a usb flash drive.
    # output5
    output "Making $CUSTOMISO a hybrid iso" "60"
    isohybrid --uefi $WORKDIR/$CUSTOMISO

    # create the md5 sum file 
    # output6
    output "Creating $CUSTOMISO.md5 in $WORKDIR" "72"

    cd $WORKDIR
    md5sum $CUSTOMISO > $CUSTOMISO.md5

    sleep 1
    # output7
    output "Creating $CUSTOMISO.sha256 in $WORKDIR" "84"

    cd $WORKDIR
    sha256sum $CUSTOMISO > $CUSTOMISO.sha256

    sleep 1

    ISOSIZE="`ls -hs $WORKDIR/$CUSTOMISO | awk '{print $1}'`"

    
    # output8

    output "$WORKDIR/$CUSTOMISO which is $ISOSIZE in size is ready to be tested." "100"

}







cdfs $@

iso $@
  
output "ISOLOCATION,$WORKDIR/$CUSTOMISO" "100"      #the trigger word ISOLOCATION will be used in the pythonscript to display and store the iso location


## test this image with 
#   kvm -cdrom life-dist1.iso -boot d -m 1024
#####




exit 0
